TT_INT	 int
T_ID	 main
T_LBRACKET	 (
T_RBRACKET	 )
T_LBRACE	 {
TT_INT	 int
T_ID	 x
T_COMMA	 ,
T_ID	 y
T_SEMICOLON	 ;
TT_CHAR	 char
T_ID	 status
T_LSQBRACKET	 [
T_INT	 10
T_RSQBRACKET	 ]
T_SEMICOLON	 ;
T_ID	 status
T_ASSIGN	 =
T_STR	 "yes"
T_SEMICOLON	 ;
T_WHILE	 while
T_LBRACKET	 (
T_ID	 status
T_EQUALITY	 ==
T_STR	 "yes"
T_RBRACKET	 )
T_LBRACE	 {
T_PRINT	 print
T_LBRACKET	 (
T_STR	 "Enter the first number:- "
T_RBRACKET	 )
T_SEMICOLON	 ;
T_READ	 read
T_LBRACKET	 (
T_ID	 x
T_RBRACKET	 )
T_SEMICOLON	 ;
T_PRINT	 print
T_LBRACKET	 (
T_STR	 "Enter the second number:- \n"
T_RBRACKET	 )
T_SEMICOLON	 ;
T_READ	 read
T_LBRACKET	 (
T_ID	 y
T_RBRACKET	 )
T_SEMICOLON	 ;
TT_VOID	 void
T_ID	 multiplication
T_LBRACKET	 (
T_ID	 x
T_COMMA	 ,
T_ID	 y
T_RBRACKET	 )
T_SEMICOLON	 ;
T_PRINT	 print
T_LBRACKET	 (
T_STR	 "Do you want to continue, yes or no ?\n"
T_RBRACKET	 )
T_SEMICOLON	 ;
T_READ	 read
T_LBRACKET	 (
T_ID	 status
T_RBRACKET	 )
T_SEMICOLON	 ;
T_RBRACE	 }
TT_INT	 int
T_ID	 i
T_SEMICOLON	 ;
TT_INT	 int
T_ID	 j
T_ASSIGN	 =
T_INT	 5
T_SEMICOLON	 ;
TT_INT	 int
T_ID	 arr
T_ASSIGN	 =
T_LSQBRACKET	 [
T_INT	 1
T_COMMA	 ,
T_INT	 2
T_COMMA	 ,
T_INT	 3
T_COMMA	 ,
T_INT	 4
T_COMMA	 ,
T_INT	 5
T_RSQBRACKET	 ]
T_SEMICOLON	 ;
T_FOR	 for
T_LBRACKET	 (
T_ID	 i
T_ASSIGN	 =
T_INT	 0
T_SEMICOLON	 ;
T_ID	 i
T_LESS	 <
T_INT	 5
T_SEMICOLON	 ;
T_ID	 i
T_INC	 ++
T_RBRACKET	 )
T_LBRACE	 {
T_ID	 arr
T_LSQBRACKET	 [
T_ID	 i
T_RSQBRACKET	 ]
T_ASSIGN	 =
T_ID	 arr
T_LSQBRACKET	 [
T_ID	 i
T_RSQBRACKET	 ]
T_MUL	 *
T_ID	 j
T_SEMICOLON	 ;
T_ID	 i
T_INC	 ++
T_SEMICOLON	 ;
T_ID	 j
T_DEC	 --
T_SEMICOLON	 ;
T_RBRACE	 }
TT_INT	 int
T_ID	 a
T_COMMA	 ,
T_ID	 b
T_COMMA	 ,
T_ID	 c
T_SEMICOLON	 ;
T_SEMICOLON	 ;
T_ID	 a
T_ASSIGN	 =
T_INT	 10
T_SEMICOLON	 ;
T_ID	 b
T_ASSIGN	 =
T_INT	 0
T_SEMICOLON	 ;
T_ID	 c
T_ASSIGN	 =
T_INT	 11
T_SEMICOLON	 ;
T_IF	 if
T_LBRACKET	 (
T_ID	 a
T_EQUALITY	 ==
T_INT	 10
T_RBRACKET	 )
T_LBRACE	 {
T_ID	 b
T_ASSIGN_INC	 +=
T_INT	 0
T_SEMICOLON	 ;
T_RBRACE	 }
TT_ELSE	 else
T_LBRACE	 {
T_ID	 c
T_ASSIGN_DEC	 -=
T_INT	 1
T_SEMICOLON	 ;
T_RBRACE	 }
T_IF	 if
T_LBRACKET	 (
T_ID	 a
T_EQUALITY	 ==
T_INT	 10
T_AND	 &&
T_ID	 b
T_EQUALITY	 ==
T_INT	 20
T_RBRACKET	 )
T_LBRACE	 {
T_ID	 c
T_ASSIGN	 =
T_ID	 a
T_BIN_ADD	 +
T_ID	 b
T_SEMICOLON	 ;
T_RBRACE	 }
TT_ELSE	 else
T_LBRACE	 {
T_IF	 if
T_LBRACKET	 (
T_ID	 a
T_EQUALITY	 ==
T_INT	 0
T_OR	 ||
T_ID	 b
T_EQUALITY	 ==
T_INT	 0
T_RBRACKET	 )
T_LBRACE	 {
T_ID	 c
T_ASSIGN	 =
T_ID	 a
T_MINUS	 -
T_ID	 b
T_SEMICOLON	 ;
T_RBRACE	 }
T_RBRACE	 }
TT_INT	 int
T_ID	 count
T_ASSIGN	 =
T_INT	 10
T_SEMICOLON	 ;
T_WHILE	 while
T_LBRACKET	 (
T_ID	 count
T_INEQUALITY	 !=
T_INT	 0
T_RBRACKET	 )
T_LBRACE	 {
T_ID	 count
T_DEC	 --
T_SEMICOLON	 ;
T_RBRACE	 }
T_RETURN	 return
T_INT	 0
T_SEMICOLON	 ;
T_RBRACE	 }
TT_VOID	 void
T_ID	 multiplication
T_LBRACKET	 (
TT_INT	 int
T_ID	 x
T_COMMA	 ,
TT_INT	 int
T_ID	 y
T_RBRACKET	 )
T_LBRACE	 {
TT_INT	 int
T_ID	 mult
T_SEMICOLON	 ;
T_ID	 mult
T_ASSIGN	 =
T_ID	 x
T_MUL	 *
T_ID	 y
T_SEMICOLON	 ;
T_PRINT	 print
T_LBRACKET	 (
T_ID	 mult
T_RBRACKET	 )
T_SEMICOLON	 ;
T_RBRACE	 }
